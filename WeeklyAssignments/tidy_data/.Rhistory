for (cond in unique_conditions) {
mean_reaction_time <- magic_ball %>% filter(condition == cond) %>% summarize(mean_reaction = mean(reaction_time, na.rm = TRUE)) %>% pull(mean_reaction)
mean_reaction_times <- c(mean_reaction_times, mean_reaction_time)
}
mean_reaction_times <- c()
for (cond in unique_conditions) {
mean_reaction_time <- magic_ball %>% filter(condition == cond) %>% summarize(mean_reaction = mean(rt, na.rm = TRUE)) %>% pull(mean_reaction)
mean_reaction_times <- c(mean_reaction_times, mean_reaction_time)
}
names(mean_reaction_times) <- unique_conditions
mean_reaction_times
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(c(mean_reaction_time, correct),
list(mean = mean,
overall_accuracy = ~mean(.==TRUE)),
.names = "{col}_{fn}" ))
# using across
names(mean_reaction_times)%>%
group_by(condition) %>%
summarise(across(c(mean_reaction_times, correct),
list(mean = mean,
overall_accuracy = ~mean(.==TRUE)),
.names = "{col}_{fn}" ))
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(c(mean_reaction_time, correct),
list(mean = mean,
overall_accuracy = ~mean(.==TRUE)),
.names = "{col}_{fn}" ))
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(where(is.numeric),
list(mean = ~mean(.),
overall_accuracy = ~mean(. == TRUE)),
.names = "{col}_{fn}"))
# using across
magic_ball %>%
group_by(condition) %>%
summarise(mean_reaction_time = mean(reaction_time),
overall_accuracy = mean(correct))
# using across
magic_ball %>%
group_by(condition) %>%
summarise(mean_reaction_time = mean(rt),
overall_accuracy = mean(correct))
# using across
summary_df <- magic_ball %>%
group_by(condition) %>%
summarise(mean_reaction_time = mean(reaction_time, na.rm = TRUE),
overall_accuracy = mean(correct, na.rm = TRUE))
# using across
summary_df <- magic_ball %>%
group_by(condition) %>%
summarise(mean_reaction_time = mean(rt, na.rm = TRUE),
overall_accuracy = mean(correct, na.rm = TRUE))
# Reshape the data so that conditions are in the middle
reshaped_df <- summary_df %>%
pivot_longer(cols = c(mean_reaction_time, overall_accuracy), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = condition, values_from = value)
# Output the reshaped table
reshaped_df
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(c(rt), mean, .names = "mean_{col}"),
overall_accuracy = mean(correct, na.rm = TRUE)) %>%
relocate(condition, .before = mean_reaction_time)
# without using across
magic_ball %>%
group_by(condition) %>%
summarise(
mean_reaction_time = mean(mean_reaction_time),
overall_accuracy = mean(correct == TRUE)
)
# without using across
magic_ball %>%
group_by(condition) %>%
summarise(
mean_reaction_time = mean(mean_reaction_time),
overall_accuracy = mean(correct == TRUE)
)%>%
select(condition, mean_reaction_time, overall_accuracy
# without using across
magic_ball %>%
group_by(condition) %>%
summarise(
mean_reaction_time = mean(mean_reaction_time),
overall_accuracy = mean(correct == TRUE)
)%>%
select(condition, mean_reaction_time, overall_accuracy)
# without using across
magic_ball %>%
group_by(condition) %>%
summarise(
mean_reaction_time = mean(mean_reaction_time),
overall_accuracy = mean(correct == TRUE)
)%>%
select(mean_reaction_time,condition, overall_accuracy)
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(c(rt), mean, .names = "mean_reaction_time"),
overall_accuracy = mean(correct)) %>%
select(condition, mean_reaction_time, overall_accuracy)
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(c(rt), mean, .names = "mean_reaction_time"),
overall_accuracy = mean(correct)) %>%
select(mean_reaction_time, condition, overall_accuracy)
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(c(rt), mean, .names = "mean_reaction_time",
overall_accuracy = mean(correct))) %>%
select(mean_reaction_time, condition, overall_accuracy)
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(c(rt,correct), mean, .names = "mean_reaction_time","overall_accuracy",
)) %>%
select(mean_reaction_time, condition, overall_accuracy)
library(tidyverse)
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(c(rt, correct), mean, .names = "mean_{col}")) %>%
rename(overall_accuracy = mean_correct) %>%
select(condition, mean_rt, overall_accuracy)
# using across
magic_ball %>%
group_by(condition) %>%
summarise(across(c(rt, correct), mean, .names = "react_time", "overall_accuracy")) %>%
rename(overall_accuracy = mean_correct) %>%
select(condition, mean_rt, overall_accuracy)
# using across
magic_ball
group_by(condition) %>%
summarise(across(c(rt, correct), mean, .names = "mean_{col}")) %>%
rename(overall_accuracy = mean_correct,
) %>%
select(condition, mean_rt, overall_accuracy)
# using across
magic_ball%>%
group_by(condition) %>%
summarise(across(c(rt, correct), mean, .names = "mean_{col}")) %>%
rename(overall_accuracy = mean_correct) %>%
select(condition, mean_rt, overall_accuracy)
# using across
magic_ball%>%
group_by(condition) %>%
summarise(across(c(rt, correct), mean, .names = "mean_{col}")) %>%
rename(overall_accuracy = mean_correct) %>%
select( mean_rt,condition, overall_accuracy)
# without using across
magic_ball %>%
group_by(condition) %>%
summarise(
mean_rt = mean(mean_reaction_time),
overall_accuracy = mean(correct == TRUE)
)%>%
select(mean_rt,condition, overall_accuracy)
# without using across
magic_ball %>%
group_by(condition) %>%
summarise(
mean_rt = mean(mean_reaction_time),
overall_accuracy = mean(correct)
)%>%
select(mean_rt,condition, overall_accuracy)
# without using across
magic_ball %>%
group_by(condition) %>%
summarise(
mean_rt = mean(rt),
overall_accuracy = mean(correct)
)%>%
select(mean_rt,condition, overall_accuracy)
mean_reaction_times <- c()
for (cond in unique_conditions) {
mean_reaction_time <- magic_ball %>%
filter(condition == cond) %>%
summarize(mean_reaction = mean(rt, na.rm = TRUE)) %>%
pull(mean_reaction)
mean_reaction_times <- c(mean_reaction_times, mean_reaction_time)
}
names(mean_reaction_times) <- unique_conditions
mean_reaction_times
summary_data %>%
ggplot(aes(x = succ_rate)) +
geom_histogram()
raw_data %>%
distinct(experimenter)
library(tidyverse)
raw_data %>%
distinct(condition)
raw_data <- map(files, read_csv) %>%
map(convert_columns) %>%
bind_rows()
files <- list.files(path = "jumping_data_parker/",
pattern = "*.csv",
full.names = TRUE)
raw_data <- map(files, read_csv) %>%
map(convert_columns) %>%
bind_rows()
raw_data %>%
distinct(condition)
summary_data <- raw_data %>%
group_by(subject, distance) %>%
summarise(succ_rate = sum(outcome == 1)/n())
library(tidyverse)
getwd()
knitr::opts_knit$set(root.dir = "~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data")
#had to be added for working dir issues, now fixed
magic_ball <- read_csv("MFindD_probtask.csv")
magic_ball
prob_data <- magic_ball
#Running the given code chunk
prob_data %>%
group_by(condition) %>%
summarise(across(c(rt, correct), mean)) %>%
pivot_longer(c(rt, correct)) %>%
ggplot(aes(y = value, x = condition)) +
geom_point(color = "red") +
facet_wrap(~name, scales = "free")
#Running the given code chunk
prob_data %>%
group_by(condition) %>%
summarise(across(c(rt, correct), mean)) %>%
pivot_longer(c(rt, correct)) %>%
ggplot(aes(y = value, x = condition)) +
geom_point(color = "red") +
facet_wrap(~name, scales = "free")
ggdist
library(ggdist)
load(ggdist)
install.packages("ggdist")
library(ggdist)
library(ggdist)
# Summarize data to get proportion of trials correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct)) %>%
ungroup()
# Create a new plot that shows the mean proportion correct
prob_data_summary %>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr)) %>%
ggplot(aes(x = condition, y = mean_prop_corr)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = mean_prop_corr - sd(prop_corr)/sqrt(n()),
ymax = mean_prop_corr + sd(prop_corr)/sqrt(n())),
width = 0.2) +
theme_minimal() +
labs(title = "Mean Proportion Correct by Condition",
x = "Condition", y = "Mean Proportion Correct")
# Summarize data to get proportion of trials correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
prop_coor <- mean(correct)
# Summarize data to get proportion of trials correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
prop_coor <- mean(correct)%>%
summarise(prop_corr) %>%
ungroup()
prob_data <- magic_ball
#Running the given code chunk
prob_data %>%
group_by(condition) %>%
summarise(across(c(rt, correct), mean)) %>%
pivot_longer(c(rt, correct)) %>%
ggplot(aes(y = value, x = condition)) +
geom_point(color = "red") +
facet_wrap(~name, scales = "free")
# Summarize data to get proportion of trials correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
prop_coor <- mean(correct)%>%
summarise(prop_corr) %>%
ungroup()
# Summarize data to get proportion of trials correct
prob_data_summary <- prob_data %>%
prop_coor <- mean(correct)%>%
group_by(SubID, condition) %>%
summarise(prop_corr) %>%
ungroup()
# Summarize data to get proportion of trials correct
prop_coor <- mean(correct)
knitr::opts_knit$set(root.dir = "~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data")
#had to be added for working dir issues, now fixed
#in order to load the tidyverse library you must run the following
library(tidyverse)
library (ggdist)
?tidyverse
#Below is the provided description after running #?tidyverse
read_csv("MFIndD_analogy.csv") #renamed
# Summarize data to get proportion of trials correct
prob_data%>%
prop_corr <- mean(correct)
# Summarize data to get proportion of trials correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
# Check the summarized data
print(head(prob_data_summary))
# Create a new plot that shows the mean proportion correct
prob_data_summary %>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr)) %>%
ggplot(aes(x = condition, y = mean_prop_corr)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = mean_prop_corr - sd(prop_corr)/sqrt(n()),
ymax = mean_prop_corr + sd(prop_corr)/sqrt(n())),
width = 0.2) +
theme_minimal() +
labs(title = "Mean Proportion Correct by Condition",
x = "Condition", y = "Mean Proportion Correct")
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
# Check the summarized data
print(head(prob_data_summary))
# Create a new plot that shows the mean proportion correct
prob_data_summary %>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr)) %>%
ggplot(aes(x = condition, y = mean_prop_corr)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = mean_prop_corr - sd(prop_corr)/sqrt(n()),
ymax = mean_prop_corr + sd(prop_corr)/sqrt(n())),
width = 0.2) +
theme_minimal() +
labs(title = "Mean Proportion Correct by Condition",
x = "Condition", y = "Mean Proportion Correct")
mean_reaction_times <- c()
for (cond in unique_conditions) {
mean_reaction_time <- magic_ball %>%
filter(condition == cond) %>%
summarize(mean_reaction = mean(rt, na.rm = TRUE)) %>%
pull(mean_reaction)
mean_reaction_times <- c(mean_reaction_times, mean_reaction_time)
}
names(mean_reaction_times) <- unique_conditions
mean_reaction_times
# using across
magic_ball%>%
group_by(condition) %>%
summarise(across(c(rt, correct), mean, .names = "mean_{col}")) %>%
rename(overall_accuracy = mean_correct) %>%
select( mean_rt,condition, overall_accuracy)
# Summarize the data again for mean and standard deviation calculations
mean_prop_summary <- prob_data_summary %>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr),
n = n(),
.groups = 'drop')
# Check the summarized data for mean and standard deviation
print(mean_prop_summary)
mean_prop_summary %>%
ggplot(aes(x = condition, y = mean_prop_corr)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = mean_prop_corr - sd_prop_corr / sqrt(n),
ymax = mean_prop_corr + sd_prop_corr / sqrt(n)),
width = 0.2) +
theme_minimal() +
labs(title = "Mean Proportion Correct by Condition",
x = "Condition", y = "Mean Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mean_prop_summary %>%
ggplot(aes(x = condition, y = mean_prop_corr)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = mean_prop_corr - sd_prop_corr / sqrt(n),
ymax = mean_prop_corr + sd_prop_corr / sqrt(n)),
width = 0.2) +
theme_minimal() +
labs(title = "Mean Proportion Correct by Condition",
x = "Condition", y = "Mean Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Double checking summary is correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
# Check the summarized data
print(head(prob_data_summary))
# Install and load ggdist package
install.packages("ggdist")
library(ggdist)
# Create plot with distributional information
prob_data_summary %>%
ggplot(aes(x = condition, y = prop_corr)) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition, y = mean(prop_corr)),
color = "blue", position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
theme_minimal() +
labs(title = "Distribution of Proportion Correct by Condition",
x = "Condition", y = "Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
knitr::opts_knit$set(root.dir = "~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data")
#had to be added for working dir issues, now fixed
# Create plot with distributional information
prob_data_summary %>%
ggplot(aes(x = condition, y = prop_corr)) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition, y = mean(prop_corr)),
color = "blue", position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
theme_minimal() +
labs(title = "Distribution of Proportion Correct by Condition",
x = "Condition", y = "Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
libary(tidyverse)
library(tidyverse)
library(ggdist)
# Create plot with distributional information
prob_data_summary %>%
ggplot(aes(x = condition, y = prop_corr)) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition, y = mean(prop_corr)),
color = "blue", position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
theme_minimal() +
labs(title = "Distribution of Proportion Correct by Condition",
x = "Condition", y = "Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
# Summarize the data again for mean and standard deviation calculations
mean_prop_summary <- prob_data_summary %>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr),
n = n(),
.groups = 'drop')
# Check the summarized data for mean and standard deviation
print(mean_prop_summary)
#Double checking summary is correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
# Check the summarized data
print(prob_data_summary)
mean_prop_summary %>%
ggplot(aes(x = condition, y = mean_prop_corr)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = mean_prop_corr - sd_prop_corr / sqrt(n),
ymax = mean_prop_corr + sd_prop_corr / sqrt(n)),
width = 0.2) +
theme_minimal() +
labs(title = "Mean Proportion Correct by Condition",
x = "Condition", y = "Mean Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Double checking summary is correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr),  # Standard deviation for error bars
n = n(), .groups = 'drop')  # Ensure ungrouping
# Summarize the data again for mean and standard deviation calculations
mean_prop_summary <- prob_data_summary %>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr),
n = n(),
.groups = 'drop')
# Check the summarized data for mean and standard deviation
print(mean_prop_summary)
#Double checking summary is correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
# Check the summarized data
print(head(prob_data_summary))
#Double checking summary is correct
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct),sd_prop_corr = sd(prop_corr), .groups = 'drop')  # Ensure ungrouping
# Check the summarized data
print(head(prob_data_summary))
#Double checking summary is correct/Summarizing to get the proportion of the data correct.
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
# Check the summarized data
print(prob_data_summary)
mean_prop_summary %>%
ggplot(aes(x = condition, y = mean_prop_corr)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = mean_prop_corr - sd_prop_corr / sqrt(n),
ymax = mean_prop_corr + sd_prop_corr / sqrt(n)),
width = 0.2) +
theme_minimal() +
labs(title = "Mean Proportion Correct by Condition",
x = "Condition", y = "Mean Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate mean proportion correct for each condition
mean_prop_summary <- prob_data_summary %>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr),  # Standard deviation for error bars(to help with readability of the plot)
n = n(), .groups = 'drop')
mean_prop_summary %>%
ggplot(aes(x = condition, y = mean_prop_corr)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = mean_prop_corr - sd_prop_corr / sqrt(n),
ymax = mean_prop_corr + sd_prop_corr / sqrt(n)),
width = 0.2) +
theme_minimal() +
labs(title = "Mean Proportion Correct by Condition",
x = "Condition", y = "Mean Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
