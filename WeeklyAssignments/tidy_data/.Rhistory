fig.align = 'center',
out.width = "100%")
options(knitr.table.format = "html")
library(tidyverse)
library(ggplot2)
library(ggdist)
prob_task <- read_csv("Chin_WA11_files/data/MFIndD_probtask.csv")
r_refs("r-references.bib")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
theme_set(theme_dark())
num <- 99
knitr::include_graphics("img11/Probtask_Trial.png")
knitr::include_graphics("img11/Probtask_formats.png")
#Double checking summary is correct/Summarizing to get the proportion of the data correct.
prob_data_summary <- prob_task%>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
print(prob_data_summary)
# Calculate mean proportion correct for each condition
mean_prop_summary <- prob_data_summary%>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr), prop_corr,  # Standard deviation for error bars(to help with readability of the plot)
n = n(), .groups = 'drop')
fixed_plot <- mean_prop_summary %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
ggplot(aes(x = condition_name, y = prop_corr )) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition_name, y = mean_prop_corr),
color = "blue",position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
theme_minimal() +
labs(title = "Distribution of Accuracy by Condition",
x = "Format Type", y = "Accuracy")
#+theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
fixed_plot + ylim(0,1)
average_data <- prob_task %>%
group_by(SubID, condition) %>%
summarize(rt = mean(rt), correct = mean(correct), .groups = 'drop')
# Plot with facet by condition
faceted <- average_data %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
ggplot(aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition_name), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
faceted + ylim(0,1)
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` and `right_stim` based on `_` separator
separate(left_stim, into = c("left_numerator", "left_other"), sep = "_", fill = "right") %>%
separate(right_stim, into = c("right_numerator", "right_other"), sep = "_", fill = "right") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other),
)%>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
group_by(SubID,condition_name, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition_name, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Format Type",
y = "Accuracy",
color = "Numerator Congruency",
) +
#theme_minimal() +
theme(legend.position = "top")
#plot_mod + ylim(0,1)
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
group_by(SubID,condition_name, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition_name, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Format Type",
y = "Accuracy",
color = "Numerator Congruency",
) +
#theme_minimal() +
theme(legend.position = "top")
#plot_mod + ylim(0,1)
library("papaja")
library(tidyverse)
library(ggplot2)
library(ggthemes) #for more interesting plot theme colors
library(ggdist)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
tidy = FALSE,
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 11'),
message = FALSE,
fig.align = 'center',
out.width = "100%")
options(knitr.table.format = "html")
prob_task <- read_csv("Chin_WA11_files/data/MFIndD_probtask.csv")
r_refs("r-references.bib")
theme_set(theme_economist())
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
group_by(SubID,condition_name, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition_name, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Format Type",
y = "Accuracy",
color = "Numerator Congruency",
) +
theme(legend.position = "top")
#plot_mod + ylim(0,1)
fixed_plot <- mean_prop_summary %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
ggplot(aes(x = condition_name, y = prop_corr )) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition_name, y = mean_prop_corr),
color = "blue",position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
labs(title = "Distribution of Accuracy by Condition",
x = "Format Type", y = "Accuracy")
#+theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
fixed_plot + ylim(0,1)
# Plot with facet by condition
faceted <- average_data %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
ggplot(aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition_name), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
faceted + ylim(0,1)
# Plot with facet by condition
faceted <- average_data %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
ggplot(aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition_name), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
)
faceted + ylim(0,1)
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
group_by(SubID,condition_name, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition_name, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Format Type",
y = "Accuracy",
color = "Numerator Congruency",
) +
theme(legend.position = "top")
#plot_mod + ylim(0,1)
knitr::include_graphics("img11/Probtask_Trial.png")
library("papaja")
library(tidyverse)
library(ggplot2)
library(ggthemes) #for more interesting plot theme colors
library(ggdist)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
tidy = FALSE,
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 11'),
message = FALSE,
fig.align = 'center',
out.width = "100%")
options(knitr.table.format = "html")
prob_task <- read_csv("Chin_WA11_files/data/MFIndD_probtask.csv")
r_refs("r-references.bib")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
theme_set(theme_economist())
num <- 99
knitr::include_graphics("img11/Probtask_Trial.png")
knitr::include_graphics("img11/Probtask_formats.png")
#Double checking summary is correct/Summarizing to get the proportion of the data correct.
prob_data_summary <- prob_task%>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
print(prob_data_summary)
# Calculate mean proportion correct for each condition
mean_prop_summary <- prob_data_summary%>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr), prop_corr,  # Standard deviation for error bars(to help with readability of the plot)
n = n(), .groups = 'drop')
fixed_plot <- mean_prop_summary %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
ggplot(aes(x = condition_name, y = prop_corr )) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition_name, y = mean_prop_corr),
color = "blue",position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
labs(title = "Distribution of Accuracy by Condition",
x = "Format Type", y = "Accuracy")
#+theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
fixed_plot + ylim(0,1)
average_data <- prob_task %>%
group_by(SubID, condition) %>%
summarize(rt = mean(rt), correct = mean(correct), .groups = 'drop')
# Plot with facet by condition
faceted <- average_data %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
ggplot(aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition_name), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
)
faceted + ylim(0,1)
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` and `right_stim` based on `_` separator
separate(left_stim, into = c("left_numerator", "left_other"), sep = "_", fill = "right") %>%
separate(right_stim, into = c("right_numerator", "right_other"), sep = "_", fill = "right") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other),
)%>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
mutate(condition_name = case_when(
condition == "blob_shifted" ~ "Separate Blob",
condition == "blob_stacked" ~ "Half/Half Blob",
condition == "dots_EqSizeSep" ~ "Separate Dots",
condition == "dots_EqSizeRand" ~ "Mixed Dots"
)) %>%
group_by(SubID,condition_name, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition_name, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Format Type",
y = "Accuracy",
color = "Numerator Congruency",
) +
theme(legend.position = "top")
#plot_mod + ylim(0,1)
e2_err
err_data <- bind_rows(e2_err, e5_err)%>%
bind_rows(e15_err)
library(tidyverse)
library(ggplot2)
err_data <- bind_rows(e2_err, e5_err)%>%
bind_rows(e15_err)
err_data%>%
ggplot(aes(x = error, y = error_type,color = group ))+
stat_summary(fun.data = se_mean, geom = "pointrange")
err_data%>%
ggplot(aes(x = error, y = error_type,color = group ))+
stat_summary(fun.data = mean_se, geom = "pointrange")
err_data <- bind_rows(e2_err, e5_err)%>%
bind_rows(e15_err)
err_data <- bind_rows(e2_err, e5_err)%>%
bind_rows(e15_err)
err_data
err_data%>%
ggplot(aes(x = error_2_df, y = error_type,color = group ))+
stat_summary(fun.data = mean_se, geom = "pointrange")
e2_err
#e15_err
#e5_err
#e2_err
e15_err
#e5_err
#e2_err
#e15_err
e5_err
err_data%>%
ggplot(aes(x = error_2_df, y = ... 1,color = group ))+
err_data <- bind_rows(e2_err, e5_err)%>%
bind_rows(e15_err)
err_data <- err_data%>% rename( "error_type" = `<NA>`)
library(tidyverse)
library(ggdist)
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/Data Exercise/DE3')
desc <- read_csv('data/desc_all.csv')
e2_err <- read_csv('data/e2_error_df.csv')
e5_err<- read_csv('data/e5_error_df.csv')
e15_err<- read_csv('data/e15_error_df.csv')
desc%>%
ggplot(aes(y = no_categories))+
geom_histogram(binwidth = 1,
color = "white",
fill = "black")
desc%>%
ggplot(aes(y = no_categories))+#because we are creating a histogram
geom_histogram() +
facet_grid(~group_name)
desc%>%
distinct(group_name)
desc%>%
count(group_name) #this is counting the number of rows.
desc%>%
filter(is.na(group_name) == FALSE)%>%
mutate(full_group_name = case_when(group_name == "south_asian" ~ "South Asian",
group_name == "se_asian" ~ "Southeast Asian",
group_name == "non_asian_multi" ~ "Non-Asian Multilingual",
group_name == "eng_mono" ~ "English monolingual diverse",
group_name == "east_asian" ~ "East Asian"),
full_group_name = factor(full_group_name,
levels = rev(c("English monolingual diverse",
"Non-Asian Multilingual",
"South Asian",
"Southeast Asian",
"East Asian"))))%>%
ggplot(aes(y = full_group_name,
x = no_categories,
fill = full_group_name,
fct_rev(full_group_name)
)) +
geom_boxplot( color = "black") +
xlim(0,15) +
labs(x = "Number of Categories",
y = "Group Name",
title = "Average Number of Categories Created per group") +
theme_minimal()+
theme(legend.position = "none") +
scale_fill_viridis_d(option = "plasma")
#we need to re-order the categories using "factor".
#annotate (geom = "text", y= 1, x = 17.5, ) .... sd was calculated in an earlier chunk. *
e2_err
e15_err
e5_err
err_data <- bind_rows(e2_err, e5_err)%>%
bind_rows(e15_err)
err_data%>%
ggplot(aes(x = error_2_df, y = ... 1,color = group ))+
err_data%>%
ggplot(aes(x = error_2_df, y = error_type,color = group ))+
stat_summary(fun.data = mean_se, geom = "pointrange", position = position_dodge(0.7)) #dodge meaning right next to each other
#had to rename the blank column in the data to "error_type" manually
install.packages("readxl")
getwd()
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/Final Project Materials')
library(ggplot2)
library(dplyr)
library(readxl)
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/Final Project Materials')
data <- readxl::read_excel("MaterialData/SegmentationData")
library(ggplot2)
library(dplyr)
library(readxl)
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/Final Project Materials')
data <- readxl::read_excel("MaterialData/SegmentationData")
data <- readxl::read_excel("MaterialData/SegmentationData.xlsx")
data <- readxl::read_excel("MaterialData/SegmentationData.xlsx")
head(data)
data <- readxl::read_excel("MaterialData/Book1.xlsx")
head(data)
# Create a box plot for AgrMn (Mean segmentation agreement scores)
ptsd_boxplot <- ggplot(data, aes(y = AgrMn)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(
title = "Segmentation Agreement Scores for PTSD Participants",
y = "Mean Segmentation Agreement Score (AgrMn)",
x = NULL,
caption = "Figure: Distribution of mean segmentation agreement scores (AgrMn) for participants with PTSD."
) +
theme_minimal()
# Print the plot
print(ptsd_boxplot)
data <- readxl::read_excel("MaterialData/Book1.xlsx")
head(data)
# Create a box plot for AgrMn (Mean segmentation agreement scores)
ptsd_boxplot <- ggplot(data, aes(y = AgrMn)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(
title = "Segmentation Agreement Scores for PTSD Participants",
y = "Mean Segmentation Agreement Score (AgrMn)",
x = NULL,
caption = "Figure: Distribution of mean segmentation agreement scores (AgrMn) for participants with PTSD."
) +
theme_minimal()
# Print the plot
print(ptsd_boxplot)
# Create a box plot for AgrMn (Mean segmentation agreement scores)
ptsd_boxplot <- ggplot(data3, aes(y = AgrMn)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(
title = "Segmentation Agreement Scores for PTSD Participants",
y = "Mean Segmentation Agreement Score (AgrMn)",
x = NULL,
caption = "Figure: Distribution of mean segmentation agreement scores (AgrMn) for participants with PTSD."
) +
theme_minimal()
data3 <- readxl::read_excel("MaterialData/Book1.xlsx")
head(data)
data3 <- readxl::read_excel("MaterialData/SegmentationAgreement-scored-corr")
data3 <- readxl::read_excel("MaterialData/SegmentationAgreement-scored-corr.xslx")
library(ggplot2)
library(dplyr)
library(readxl)
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/Final Project Materials')
data3 <- readxl::read_excel("MaterialData/SegmentationAgreement-scored-corr.xslx")
data3 <- readxl::read_excel("MaterialData/SegmentationAgreement-scored-corr.xlsx")
