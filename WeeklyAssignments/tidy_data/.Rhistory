FL_42_DO,
FL_39_DO,
FL_43_DO)%>%
filter(ResponseId != "BL_3ymTJ3ZOZWWbWGa|MagazineControl")
#this is the correct assignment way I think.
#na.rm removes "NA's"
de1
de1_longer <- de1%>%
pivot_longer(pencil_control,pencil_stnd, #which columns to pivot
names_to = "old_col", #where to put the old column names
values_to = "old_val")#where to put the data observations
rationality_ques
de1_longer %>%
filter(is.na(value) == FALSE)%>%
separate(into = c("content", "type", "DV"), col = old_col)
distinct(mag_stand)
de1%>%
distinct(mag_stand)
rationality_ques%>%
mutate(response_dbl = case_when(
TRUE ~ NA_real_
response == "Strongly Disagree" ~ 1,
rationality_ques%>%
mutate(response_dbl = case_when(
TRUE ~ NA_character_
response == "Strongly Disagree" ~ 1,
rationality_ques%>%
mutate(response_dbl = case_when(
TRUE ~ NA
response == "Strongly Disagree" ~ 1,
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
))
library(tidyverse)
rationality_ques<- read_csv("MFIndD_REI.csv")
rationality_ques%>%
head(6)
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
))
rationality_ques%>%
mutate(response_dbl = case_when(
TRUE ~ NA_real_
response == "Strongly Disagree" ~ 1,
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))%>%
coalesce(response)
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
TRUE ~ response
))
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "2" ~ 2,
response == "3" ~ 3,
response == "4" ~ 4,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))
rationality_ques%>%
mutate(response_dbl = if_else(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
response
))
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "2" ~ 2,
response == "3" ~ 3,
response == "4" ~ 4,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))
?type()
dbl_response <-rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "2" ~ 2,
response == "3" ~ 3,
response == "4" ~ 4,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_ #to acknowledge and not replace any missing values
))
dbl_response <-rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "2" ~ 2,
response == "3" ~ 3,
response == "4" ~ 4,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_ #to acknowledge and not replace any missing values
))
dbl_response
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring = "neg" ~ 5 - response_dbl))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring = "neg" ~ response_dbl + -6))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_match(
rev_scoring = "neg" ~ response_dbl + -6))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring = "neg" ~ 6 - response_dbl,
TRUE = NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE = NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE == NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - scored_response,
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
rev_scoring == NA ~ response_dbl
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
rev_scoring == "NA" ~ response_dbl
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
rev_scoring = "NA" ~ response_dbl
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
rev_scoring == NA ~ response_dbl
TRUE ~ NA_real_ ~ response_dbl))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
#rev_scoring == NA ~ response_dbl
TRUE ~ NA_real_ ~ response_dbl))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = if_else(
rev_scoring == "neg", 6 - response_dbl,response_dbl
)
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = if_else(
rev_scoring == "neg", 6 - response_dbl,
response_dbl,
))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = if_else(
rev_scoring == "neg", 6 - response_dbl,
response_dbl,
missing = response_dbl
))
#items that need to be scored are marked as "neg" if not then marked with "NA"
new_score <- dbl_response%>%
mutate(new_scored_response = if_else(
rev_scoring == "neg", 6 - response_dbl,
response_dbl,
missing = response_dbl # this should account for all of the NA values
))
new_score
new_score %>%
mutate(is_equal = new_scored_response == scored_response)
# To check how many rows are not equal, you can filter those mismatches
mismatch_count <- analogy_data %>%
filter(is_equal == FALSE) %>%
count()
new_score %>%
mutate(is_equal = new_scored_response == scored_response)
# To check how many rows are not equal, you can filter those mismatches
mismatch_count <- new_score %>%
filter(is_equal == FALSE) %>%
count()
new_score <- new_score %>%
mutate(is_equal = new_scored_response == scored_response)
# To check how many rows are not equal, you can filter those mismatches
mismatch_count <- new_score %>%
filter(is_equal == FALSE) %>%
count()
# View the count of mismatches
mismatch_count
#in order to load the tidyverse library you must run the following
library(tidyverse)
getwd()
setwd)("C:/Users/mchin/OneDrive/Documents/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data")
setwd("C:/Users/mchin/OneDrive/Documents/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data")
read_csv("MFIndD_analogy.csv") #renamed
analogy_data <- read_csv("Analogy_Dataset.csv")
setwd("C:/Users/mchin/OneDrive/Documents/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data")
analogy_data <- read_csv("Analogy_Dataset.csv")
#turning analogy data set into a usable and digestible variable.
analogy_data <- read_csv("Analogy_Dataset.csv")
setwd(C:\Users\mchin\OneDrive\Documents\GitHub\ADV-Topics-2---DSR-w-R\WeeklyAssignments\tidy_data)
setwd("C:\Users\mchin\OneDrive\Documents\GitHub\ADV-Topics-2---DSR-w-R\WeeklyAssignments\tidy_data")
setwd("C:\Users\mchin\OneDrive\Documents\GitHub\ADV-Topics-2---DSR-w-R\WeeklyAssignments\tidy_data\Analogy_Dataset.csv")
setwd("C:\Users\mchin\OneDrive\Documents\GitHub\ADV-Topics-2---DSR-w-R\WeeklyAssignments\tidy_data\Analogy_Dataset.csv")
setwd("C:/Users/mchin/OneDrive/Documents/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data/Analogy_Dataset.csv")
setwd("C:/Users/mchin/OneDrive/Documents/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data")
analogy_data <- read_csv("Analogy_Dataset.csv")
read_csv("MFIndD_analogy.csv") #renamed
#in order to load the tidyverse library you must run the following
library(tidyverse)
read_csv("MFIndD_analogy.csv") #renamed
analogy_data <- read_csv("Analogy_Dataset.csv")
setwd("C:/Users/mchin/OneDrive/Documents/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data")
getwd()
#in order to load the tidyverse library you must run the following
library(tidyverse)
read_csv("MFIndD_analogy.csv") #renamed
analogy_data <- read_csv("Analogy_Dataset.csv")
glimpse(analogy_data)
#in order to load the tidyverse library you must run the following
library(tidyverse)
?tidyverse
#Below is the provided description after running #?tidyverse
read_csv("MFIndD_analogy.csv") #renamed
#in order to load the tidyverse library you must run the following
library(tidyverse)
?tidyverse
#Below is the provided description after running #?tidyverse
read_csv("MFIndD_analogy.csv") #renamed
analogy_data <- read_csv("Analogy_Dataset.csv")
glimpse(analogy_data)
analogy_data%>%
group_by(qualtrics_id)%>%
summarise(N=n()) %>%
distinct() %>%
count() %>%
head(n = 1)
analogy_data%>%
group_by(qualtrics_id,trial_number)%>%
summarise(trial_number, count = n(), .groups = "drop_last")%>%
count()
#I added the drop_last because I was getting an error"Adding missing grouping variables".
#I have checked Stack Overflow for answers, and this one seems to work!
num_of_trials <- analogy_data %>%
group_by(qualtrics_id) %>%
summarise(total_responses = n(), .groups = "drop") %>%  # Count total responses per ID
left_join(                                                       # Join with the count of "Rel" responses
analogy_data %>%
filter(response_type == "Rel") %>%
group_by(qualtrics_id) %>%
summarise(num_of_trials = n(), .groups = "drop"),
by = "qualtrics_id"
) %>%
mutate(num_of_trials = coalesce(num_of_trials, 0)) %>%  # Replace NA with 0 for those with no "Rel" responses
distinct(qualtrics_id, num_of_trials)
#I reworked this using coalesce to take into account the 0's that should be showing up in the manipulated
#dataset.
#I am also checking to see if num_of_trials runs as expected separately from storing the info in "num_of_trials". Which it works as expected!
num_of_trials%>%
ggplot(aes(x = num_of_trials))+
geom_histogram()+
labs(x = "number of 'Rel' responses",
y = "amount of people ")
rationality_ques<- read_csv("MFIndD_REI.csv")
dbl_response <-rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "2" ~ 2,
response == "3" ~ 3,
response == "4" ~ 4,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_ #to acknowledge and not replace any missing values
))
dbl_response
#items that need to be scored are marked as "neg" if not then marked with "NA"
new_score <- dbl_response%>%
mutate(new_scored_response = if_else(
rev_scoring == "neg", 6 - response_dbl,
response_dbl,
missing = response_dbl # this should account for all of the NA values
))
new_score
new_score <- new_score %>%
mutate(is_equal = new_scored_response == scored_response)
# To check how many rows are not equal,filter those mismatches
mismatch_count <- new_score %>%
filter(is_equal == FALSE) %>%
count()
# View the count of mismatches
mismatch_count
getcd()
getwd()
#in order to load the tidyverse library you must run the following
library(tidyverse)
setwd("C:/Users/mchin/OneDrive/Documents/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/tidy_data")
knitr root.dir
analogy_data <- read_csv("Analogy_Dataset.csv")
#in order to load the tidyverse library you must run the following
library(tidyverse)
read_csv("MFIndD_analogy.csv") #renamed
analogy_data <- read_csv("Analogy_Dataset.csv")
#The downloaded binary packages are in
#C:\Users\mchin\AppData\Local\Temp\RtmpW0fCpq\downloaded_packages
plot(cars)
ohno_this_is_a_nightmare <- "hello"
2+2
x <- 2+2
?mean
#how we can look for things we don't know.(use ?)
#function call looks like mean()
#arrays look like c(2,3,4)
sd(1:2) ^ 2
#make sure to complete first code chunks
# to create a vector, use c(list, numbers, inside, like, this)
my_numbers <- c( 1,2,3,4,5,8,9,10)
library(magrittr)
library(tidyverse)
#must be loaded each session
mean(my_numbers)
my_numbers %>%
mean()
getwd()
?mtcars
mtcars
write_csv(mtcars, # object name,
"mtcars_fromR.csv" #file name to save it"
)
#utils is BaseR, but we want to use the _ version, as it is a part of the tidyverse pkg.
#is wihout rowname implementation and use of "rowtoname function"
read_csv("mtcars_fromR.csv")
?ChickWeight
glimpse(ChickWeight)
ChickWeight %>%
select(Chick,weight) %>%
head (n= 3)
#adding a new column called weight lbs
ChickWeight %>%
mutate(weight_lbs = weight/453.6) %>%
#mutate always adds the columns to the end of your graphs
#create summary table that has, #of chicks, avg weight,avg lbs on Day 20.
#for getting each diet group, we can use (the below)
group_by(Diet,Time)%>%
summarise(N= n(), mean_wgt_gm = mean(weight),
mean_wgt_lbs = mean(weight_lbs)) %>%
filter(Time == 20)
glimpse(mtcars)
head(billboard)
?pivot_longer
billboard_long <- billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
values_to = "position",
names_prefix = "wk",
values_drop_na = TRUE)
head(billboard_long)
dim(billboard)
dim(billboard_long)
#look! _long is actually longer! with more rows
billboard_long
billboard_long%>%
pivot_wider(names_from = week,
values_from = position)
#error bc we did not add a column name
#separate () separates a column by a specific separator
?separate
billboard %>%
separate(col = date.entered,
into = c("year", "month", "day"))
#separated the dates into year, month, day
#she automatically set the sep(separator) to be an non-alphanumeric characters
#billboard%>%
#unite(data,col, sep "_" )
#explicit missing values - NA is in the data-set
#implicit missing - the value just DOES not appear in the data-set (you have to know this data)
#complete() - turns implicit missing values into explicit missing values
#fill()- fills missing values in selected columns using the next or previous entry.
#replace_NA() - Replace NA's with specified values  -> 0 instead of NA.
#NA_if : Convert specified values to NA.
head =(ChickWeight)
ChickWeight %>%
ggplot(aes(x = weight)) + #provide the aes(aesthetic mapping, in this case, x-axis only)
geom_histogram()
head =(ChickWeight)
ChickWeight %>%
ggplot(aes(y = weight,
x = Time,
color = Diet)) +
geom_point() +
geom_smooth() +
#creates function of best fit
# to remove the error bands, write the following = geom_smooth(se = FALSE)
theme_minimal()
as.numeric("12")
#only parses digits, words do not count, but numbers as chars work tho.
as.integer(12.3)
3 < 5 | FALSE
#true
is.numeric(mean(c(12,31,15.57,4)))
#true 2nd
((1+2)< -1000) | (TRUE | NA)
my_list <- list(c("p","o","w","e","r"))
the_vector <- my_list[1]
the_vector
my_list <- list(c("p","o","w","e","r"))
the_vector <- [my_list[1][3]]
my_list <- list(c("p","o","w","e","r"))
the_vector <- my_list[1][3]
the_vector
my_list <- list(c("p","o","w","e","r"))
the_vector <- my_list[1[3]]
the_vector
my_list <- list(c("p","o","w","e","r"))
the_vector <- my_list[[1]]
the_vector
my_list <- list(c("p","o","w","e","r"))
the_vector <- my_list[[1]][3]
the_vector
new_tibble_columnwise <- tibble( x  = 1:5 , y=1, z = x^2 + y)
new_tibble_columnwise <- tibble( x  = 1:5 , y=1, z = x^2 + y)
new_tibble_columnwise
age_data
age_data <- tribble( ~id, ~age
1,8,
age_data <- tribble( ~ id, ~ age
1,8,
age_data <- tribble(
~ id, ~ age
1,8,
age_data <- tribble(
~id, ~age
1,8,
age_data <- tribble(
~id, ~age,
1,8,
2,10,
3,8,
5,9
)
gender_data <- tribble (
~id, ~ gender
1,"f",
age_data <- tribble(
~id, ~age,
1,8,
2,10,
3,8,
5,9
)
gender_data <- tribble (
~id, ~ gender,
1,"f",
2,"m",
3,"nb",
4,"m",
6,"f",
)
age_data
gender_data
full_join(age_data, gender_data)
full_join(age_data, gender_data)
