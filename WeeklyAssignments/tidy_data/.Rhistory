geom_point(aes(x = condition, y = mean_prop_corr),
color = "blue", position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
theme_minimal() +
labs(title = "Distribution of Proportion Correct by Condition",
x = "Condition", y = "Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
# Calculate mean proportion correct for each condition
mean_prop_summary <- prob_task%>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr), prop_corr,  # Standard deviation for error bars(to help with readability of the plot)
n = n(), .groups = 'drop')
print(prob_task)
#Double checking summary is correct/Summarizing to get the proportion of the data correct.
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
# Calculate mean proportion correct for each condition
mean_prop_summary <- prob_task%>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr), prop_corr,  # Standard deviation for error bars(to help with readability of the plot)
n = n(), .groups = 'drop')
#Double checking summary is correct/Summarizing to get the proportion of the data correct.
prob_data_summary <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
# Calculate mean proportion correct for each condition
mean_prop_summary <- prob_task%>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr), prop_corr,  # Standard deviation for error bars(to help with readability of the plot)
n = n(), .groups = 'drop')
#Double checking summary is correct/Summarizing to get the proportion of the data correct.
prob_data_summary <- prob_task%>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
print(prob_da)
#Double checking summary is correct/Summarizing to get the proportion of the data correct.
prob_data_summary <- prob_task%>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
print(prob_data_summary)
# Calculate mean proportion correct for each condition
mean_prop_summary <- prob_data_summary%>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr), prop_corr,  # Standard deviation for error bars(to help with readability of the plot)
n = n(), .groups = 'drop')
# Calculate mean proportion correct for each condition
mean_prop_summary <- prob_data_summary %>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr), prop_corr,  # Standard deviation for error bars(to help with readability of the plot)
n = n(), .groups = 'drop')
print(mean_prop_summary)
mean_prop_summary %>%
ggplot(aes(x = condition, y = prop_corr )) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition, y = mean_prop_corr),
color = "blue", position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
theme_minimal() +
labs(title = "Distribution of Proportion Correct by Condition",
x = "Condition", y = "Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
tidy = FALSE,
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 10'),
message = FALSE,
fig.align = 'center',
out.width = "100%")
options(knitr.table.format = "html")
library(tidyverse)
library(ggplot2)
prob_task <- read_csv("Chin_WA10_files/data/MFIndD_probtask.csv")
knitr::write_bib(c('posterdown', 'rmarkdown','pagedown'), 'packages.bib')
numpart <- 99
knitr::include_graphics("images_WA10/Probtask_Trial.png")
knitr::include_graphics("images_WA10/Probtask_formats.png")
#Double checking summary is correct/Summarizing to get the proportion of the data correct.
prob_data_summary <- prob_task%>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = 'drop')  # Ensure ungrouping
print(prob_data_summary)
# Calculate mean proportion correct for each condition
mean_prop_summary <- prob_data_summary%>%
group_by(condition) %>%
summarise(mean_prop_corr = mean(prop_corr),
sd_prop_corr = sd(prop_corr), prop_corr,  # Standard deviation for error bars(to help with readability of the plot)
n = n(), .groups = 'drop')
mean_prop_summary %>%
ggplot(aes(x = condition, y = prop_corr )) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition, y = mean_prop_corr),
color = "blue", position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
theme_minimal() +
labs(title = "Distribution of Proportion Correct by Condition",
x = "Condition", y = "Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap((~ condition), scales = 'free') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
p + facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap(vars(~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
average_data <- prob_task %>%
group_by(SubID, condition) %>%
summarize(rt = mean(rt), correct = mean(correct), .groups = 'drop')
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap((~ condition), scales = 'free') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap((~ condition), scales = 'fixed') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap((~ condition), scales = 'fixed') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy",
color = "condition"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point(color = "red", condition") +
facet_wrap((~ condition), scales = 'fixed') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point(color = "red", condition") +
facet_wrap((~ condition), scales = 'fixed') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
facet_wrap((~ condition), scales = 'fixed') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'fixed') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), (scales = 'free_y', 'fixed' )  +
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), (scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'free_y', scales = "free_x") +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'free_y',"free_x") +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
\subsection*{"blah"}
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
/subsection*{"blah"}
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
/"bla"
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
/{"label"}
?fig.cap
?caption
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggdist)
ChickWeight %>%
filter(Time == 21) %>%
ggplot(aes(y = weight, x = Diet)) +
stat_summary(geom = "bar", ## geom_bar() is the alternative, after taking the summary
fun = mean) +
stat_summary(geom = "errorbar",
fun.data = mean_se,
width = 0.2,
color = "red")
# Plot with facet by condition
ggplot(average_data, aes(x = rt, y = correct)) +
geom_point() +
geom_smooth() +
facet_wrap((~ condition), scales = 'free_y') +
labs(
title = "Reaction Time vs. Accuracy (Facets by Condition)",
x = "Average Reaction Time (ms)",
y = "Accuracy"
) +
theme_minimal()
mean_prop_summary %>%
ggplot(aes(x = condition, y = prop_corr )) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition, y = mean_prop_corr),
color = "blue", position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
theme_minimal() +
labs(title = "Distribution of Proportion Correct by Condition",
x = "Condition", y = "Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
mean_prop_summary %>%
ggplot(aes(x = condition, y = prop_corr )) +
ggdist::stat_slab() +  # Adds a distributional layer to show the density of the data
geom_point(aes(x = condition, y = mean_prop_corr),
color = "blue", position = position_nudge(y = 0.05)) +  # Offset mean points for clarity
theme_minimal() +
labs(title = "Distribution of Proportion Correct by Condition",
x = "Condition", y = "Proportion Correct") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improved readability
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed to set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9")
prob_task <- read_csv("data/MFIndD_probtask.csv")
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` and `right_stim` based on `_` separator
separate(left_stim, into = c("left_numerator", "left_other"), sep = "_", fill = "right") %>%
separate(right_stim, into = c("right_numerator", "right_other"), sep = "_", fill = "right") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other)
) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
#prob_data_mod
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
print(plot_mod)
plot_mod
prob_data_mod
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed to set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9")
prob_task <- read_csv("data/MFIndD_probtask.csv")
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` and `right_stim` based on `_` separator
separate(left_stim, into = c("left_numerator", "left_other"), sep = "_", fill = "right") %>%
separate(right_stim, into = c("right_numerator", "right_other"), sep = "_", fill = "right") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other)
) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
prob_data_mod
head (prob_data_mod)
