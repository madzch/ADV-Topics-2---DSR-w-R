library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9/data")
prob_task <- read.csv(".../WeeklyAssignments/Assignment 9/data/MFIndD_probtask.csv")
#knitr::opts_chunk$set(echo = FALSE) #needed for html knit?
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9/data")
prob_task <- read_csv("MFIndD_probtask.csv")
#knitr::opts_chunk$set(echo = FALSE) #needed for html knit?
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9/data")
prob_task <- read_csv("data/MFIndD_probtask.csv")
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed for html knit?knit$set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9")
prob_task <- read_csv("data/MFIndD_probtask.csv")
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed to set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9")
prob_task <- read_csv("data/MFIndD_probtask.csv")
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = ",") %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = ",") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other)
) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other)
) %>%
# d. Create `larger_numerator`
mutate(
larger_numerator = if_else(left_numerator > right_numerator, "left", "right")
) %>%
# e. Create `larger_proportion`
mutate(
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right")
) %>%
# f. Create `num_congruent`
mutate(
num_congruent = larger_numerator == larger_proportion
)
dplyr::last_dplyr_warnings()
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = ",") %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = ",") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other)
) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = ",") %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = ",") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other)
) %>%
# Filter out rows where any of the key columns are NA, otherwise there's an error
filter(
!is.na(left_numerator) & !is.na(left_other) &
!is.na(right_numerator) & !is.na(right_other)
) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = ",") %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = ",") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other)
) %>%
# Create `left_proportion_value` and `right_proportion_value` with NA handling
mutate(
left_proportion_value = if_else(
!is.na(left_numerator) & !is.na(left_other),
left_numerator / (left_numerator + left_other),
NA_real_  # Set to NA if either numerator or other is NA
),
right_proportion_value = if_else(
!is.na(right_numerator) & !is.na(right_other),
right_numerator / (right_numerator + right_other),
NA_real_
)
) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = ",") %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = ",") %>%
# Convert columns to numeric
#mutate(
#left_numerator = as.numeric(left_numerator),
#left_other = as.numeric(left_other),
#right_numerator = as.numeric(right_numerator),
#right_other = as.numeric(right_other)
#) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed to set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9")
prob_task <- read_csv("data/MFIndD_probtask.csv")
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = ",") %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = ",") %>%
# Convert columns to numeric
#mutate(
#left_numerator = as.numeric(left_numerator),
#left_other = as.numeric(left_other),
#right_numerator = as.numeric(right_numerator),
#right_other = as.numeric(right_other)
#) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = ",") %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = ",") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other)
) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
dplyr::last_dplyr_warnings()
prob_data_mod
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed to set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9")
prob_task <- read_csv("data/MFIndD_probtask.csv")
prob_task
prob_data_mod <- prob_task%>%
# a. Separate `left_stim` and `right_stim` based on `_` separator
separate(left_stim, into = c("left_numerator", "left_other"), sep = "_", fill = "right") %>%
separate(right_stim, into = c("right_numerator", "right_other"), sep = "_", fill = "right") %>%
# Convert columns to numeric
mutate(
left_numerator = as.numeric(left_numerator),
left_other = as.numeric(left_other),
right_numerator = as.numeric(right_numerator),
right_other = as.numeric(right_other)
) %>%
# c. Create `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other),
# d. Create `larger_numerator`
larger_numerator = if_else(left_numerator > right_numerator, "left", "right"),
# e. Create `larger_proportion`
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right"),
# f. Create `num_congruent`
num_congruent = larger_numerator == larger_proportion
)
head(prob_data$left_stim)
head(prob_data$right_stim)
head(prob_data_mod$left_stim)
head(prob_data_mod$right_stim)
prob_data_mod
head(prob_task)
# Summarize data for plotting
plot_data <- prob_data_mod %>%
group_by(SUBJECT, CONDITION, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
# Summarize data for plotting
plot_data <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
# Create the plot using `stat_halfeye`
ggplot(plot_data, aes(x = CONDITION, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed to set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9")
prob_task <- read_csv("data/MFIndD_probtask.csv")
# Summarize data for plotting
plot_data <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
# Create the plot using `stat_halfeye`
ggplot(plot_data, aes(x = CONDITION, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
library(ggplot2)
# Summarize data for plotting
plot_data <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
# Create the plot using `stat_halfeye`
ggplot(plot_data, aes(x = CONDITION, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
?stat_halfeye
??stat_halfeye
?ggdist
??ggdist
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed to set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot)
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed to set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9")
prob_task <- read_csv("data/MFIndD_probtask.csv")
??ggplot
# Summarize data for plotting
plot_data <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggplot2)
# Create the plot using `stat_halfeye`
ggplot(plot_data, aes(x = CONDITION, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
plot_data <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_data, aes(x = CONDITION, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
plot_data <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
plot_data <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_data_mod, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_data_mod, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(prob_data_mod, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
prob_data_mod
# Summarize data for plotting
prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(prob_data_mod, aes(x = condition, y = correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(prob_data_mod, aes(x = condition, y = correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
# Summarize data for plotting
plot_mod<-prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(correct = mean(num_congruent), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition, y = correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
plot_mod
# Summarize data for plotting
plot_mod <- prob_data_mod %>%
group_by(SubID,condition, num_congruent) %>%
summarize(proportion_correct = mean(correct), .groups = 'drop')
#stat_halfeye still not working even though ggplot is in setup chunk
library(ggdist)
# Create the plot using `stat_halfeye`
ggplot(plot_mod, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
knitr::opts_chunk$set(echo = FALSE,root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9') #needed to set(root.dir = '~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9')
library(tidyverse)
library(ggplot2)
#setwd("~/GitHub/ADV-Topics-2---DSR-w-R/WeeklyAssignments/Assignment 9")
prob_task <- read_csv("data/MFIndD_probtask.csv")
# Display the plot created in the previous steps
ggplot(plot_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye() +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
theme_minimal() +
theme(legend.position = "top")
```{r original csv}
plot_mod
#prob_data_mod
