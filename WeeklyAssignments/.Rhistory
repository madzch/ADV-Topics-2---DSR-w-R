library(tidyverse)
getwd()
rationality_ques<- read_csv("MFInD_REI.csv")
rationality_ques<- read_csv("MFInD_REI")
rationality_ques<- read_csv("MFInD_REI.csv")
rationality_ques<- read_csv("MFIndD_REI.csv")
rationality_ques%>%
head(6)
typeof(chr)
typeof(response)
glimpse(rationality_ques)
library(tidyverse)
de1_longer<- de1%>%
pivot_longer(pencil_control,pencil_stnd, #which columns to pivot
names_to = "old_col", #where to put the old column names
values_to = "old_val")#where to put the data observations
de1
library(tidyverse)
de1 <- read_csv("CogSci412_DE1_data.csv") %>%
filter(Progress == 100 & Status == "IP Address") %>%
mutate(condition = case_when(is.na( FL_39_DO) == FALSE ~ FL_39_DO, # if this condition is true do this first case
is.na( FL_43_DO) == FALSE ~ FL_43_DO,))%>% #if not do this second case
#selecting and renaming variables that we want into a cleaner dataset.
select(ResponseId,
condition,
familiarity = Q10,
pencil_control = `Pencil Control`,
pencil_control_conf = `Conf. Pencil Control`,
mag_stand = `Magazine Standard`,
mag_stand_conf = `Conf. Mag. Stand.`,
mag_control = Magazine_Control,
mag_control_conf = `Conf. Mag. Control` ,
pencil_stnd = Pencil_Standard,
pencil_stnd_conf = `Conf. Pencil Stand.`,
FL_42_DO,
FL_39_DO,
FL_43_DO)%>%
filter(ResponseId != "BL_3ymTJ3ZOZWWbWGa|MagazineControl")
#this is the correct assignment way I think.
#na.rm removes "NA's"
de1
de1_longer <- de1%>%
pivot_longer(pencil_control,pencil_stnd, #which columns to pivot
names_to = "old_col", #where to put the old column names
values_to = "old_val")#where to put the data observations
de1 <- read_csv("CogSci412_DE1_data.csv") %>%
filter(Progress == 100 & Status == "IP Address") %>%
mutate(condition = case_when(is.na( FL_39_DO) == FALSE ~ FL_39_DO, # if this condition is true do this first case
is.na( FL_43_DO) == FALSE ~ FL_43_DO,))%>% #if not do this second case
#selecting and renaming variables that we want into a cleaner dataset.
select(ResponseId,
condition,
familiarity = Q10,
pencil_control = `Pencil Control`,
pencil_control_conf = `Conf. Pencil Control`,
mag_stand = `Magazine Standard`,
mag_stand_conf = `Conf. Mag. Stand.`,
mag_control = Magazine_Control,
mag_control_conf = `Conf. Mag. Control` ,
pencil_stnd = `Pencil_Standard`,
pencil_stnd_conf = `Conf. Pencil Stand.`,
FL_42_DO,
FL_39_DO,
FL_43_DO)%>%
filter(ResponseId != "BL_3ymTJ3ZOZWWbWGa|MagazineControl")
#this is the correct assignment way I think.
#na.rm removes "NA's"
de1
de1_longer <- de1%>%
pivot_longer(pencil_control,pencil_stnd, #which columns to pivot
names_to = "old_col", #where to put the old column names
values_to = "old_val")#where to put the data observations
rationality_ques
de1_longer %>%
filter(is.na(value) == FALSE)%>%
separate(into = c("content", "type", "DV"), col = old_col)
distinct(mag_stand)
de1%>%
distinct(mag_stand)
rationality_ques%>%
mutate(response_dbl = case_when(
TRUE ~ NA_real_
response == "Strongly Disagree" ~ 1,
rationality_ques%>%
mutate(response_dbl = case_when(
TRUE ~ NA_character_
response == "Strongly Disagree" ~ 1,
rationality_ques%>%
mutate(response_dbl = case_when(
TRUE ~ NA
response == "Strongly Disagree" ~ 1,
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
))
library(tidyverse)
rationality_ques<- read_csv("MFIndD_REI.csv")
rationality_ques%>%
head(6)
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
))
rationality_ques%>%
mutate(response_dbl = case_when(
TRUE ~ NA_real_
response == "Strongly Disagree" ~ 1,
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))%>%
coalesce(response)
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
TRUE ~ response
))
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "2" ~ 2,
response == "3" ~ 3,
response == "4" ~ 4,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))
rationality_ques%>%
mutate(response_dbl = if_else(
response == "Strongly Disagree" ~ 1,
response == "Strongly Agree" ~ 5,
response
))
rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "2" ~ 2,
response == "3" ~ 3,
response == "4" ~ 4,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_
))
?type()
dbl_response <-rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "2" ~ 2,
response == "3" ~ 3,
response == "4" ~ 4,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_ #to acknowledge and not replace any missing values
))
dbl_response <-rationality_ques%>%
mutate(response_dbl = case_when(
response == "Strongly Disagree" ~ 1,
response == "2" ~ 2,
response == "3" ~ 3,
response == "4" ~ 4,
response == "Strongly Agree" ~ 5,
TRUE ~ NA_real_ #to acknowledge and not replace any missing values
))
dbl_response
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring = "neg" ~ 5 - response_dbl))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring = "neg" ~ response_dbl + -6))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_match(
rev_scoring = "neg" ~ response_dbl + -6))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring = "neg" ~ 6 - response_dbl,
TRUE = NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE = NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE == NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - scored_response,
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
rev_scoring == NA ~ response_dbl
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
rev_scoring == "NA" ~ response_dbl
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
rev_scoring = "NA" ~ response_dbl
TRUE ~ NA_real_))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
rev_scoring == NA ~ response_dbl
TRUE ~ NA_real_ ~ response_dbl))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = case_when(
rev_scoring == "neg" ~ 6 - response_dbl,
#rev_scoring == NA ~ response_dbl
TRUE ~ NA_real_ ~ response_dbl))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = if_else(
rev_scoring == "neg", 6 - response_dbl,response_dbl
)
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = if_else(
rev_scoring == "neg", 6 - response_dbl,
response_dbl,
))
#items that need to be scored are marked as "neg" if not then marked with "NA"
dbl_response%>%
mutate(new_scored_response = if_else(
rev_scoring == "neg", 6 - response_dbl,
response_dbl,
missing = response_dbl
))
#items that need to be scored are marked as "neg" if not then marked with "NA"
new_score <- dbl_response%>%
mutate(new_scored_response = if_else(
rev_scoring == "neg", 6 - response_dbl,
response_dbl,
missing = response_dbl # this should account for all of the NA values
))
new_score
new_score %>%
mutate(is_equal = new_scored_response == scored_response)
# To check how many rows are not equal, you can filter those mismatches
mismatch_count <- analogy_data %>%
filter(is_equal == FALSE) %>%
count()
new_score %>%
mutate(is_equal = new_scored_response == scored_response)
# To check how many rows are not equal, you can filter those mismatches
mismatch_count <- new_score %>%
filter(is_equal == FALSE) %>%
count()
new_score <- new_score %>%
mutate(is_equal = new_scored_response == scored_response)
# To check how many rows are not equal, you can filter those mismatches
mismatch_count <- new_score %>%
filter(is_equal == FALSE) %>%
count()
# View the count of mismatches
mismatch_count
